[
  {
    "objectID": "avocado.html",
    "href": "avocado.html",
    "title": "Avocado Prices",
    "section": "",
    "text": "The data docs provide some information on the source of the dataset and information regarding the attributes.\nimport pandas as pd\nimport seaborn as sns\nimport os\nfrom data import load_dataset\nimport plotter"
  },
  {
    "objectID": "avocado.html#preliminary-analysis",
    "href": "avocado.html#preliminary-analysis",
    "title": "Avocado Prices",
    "section": "Preliminary Analysis",
    "text": "Preliminary Analysis\n\navocado = load_dataset(\"avocado\")\navocado\n\n\n\n\n\n\n\n\nUnnamed: 0\nDate\nAveragePrice\nTotal Volume\n4046\n4225\n4770\nTotal Bags\nSmall Bags\nLarge Bags\nXLarge Bags\ntype\nyear\nregion\n\n\n\n\n0\n0\n2015-12-27\n1.33\n64236.62\n1036.74\n54454.85\n48.16\n8696.87\n8603.62\n93.25\n0.0\nconventional\n2015\nAlbany\n\n\n1\n1\n2015-12-20\n1.35\n54876.98\n674.28\n44638.81\n58.33\n9505.56\n9408.07\n97.49\n0.0\nconventional\n2015\nAlbany\n\n\n2\n2\n2015-12-13\n0.93\n118220.22\n794.70\n109149.67\n130.50\n8145.35\n8042.21\n103.14\n0.0\nconventional\n2015\nAlbany\n\n\n3\n3\n2015-12-06\n1.08\n78992.15\n1132.00\n71976.41\n72.58\n5811.16\n5677.40\n133.76\n0.0\nconventional\n2015\nAlbany\n\n\n4\n4\n2015-11-29\n1.28\n51039.60\n941.48\n43838.39\n75.78\n6183.95\n5986.26\n197.69\n0.0\nconventional\n2015\nAlbany\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n18244\n7\n2018-02-04\n1.63\n17074.83\n2046.96\n1529.20\n0.00\n13498.67\n13066.82\n431.85\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n18245\n8\n2018-01-28\n1.71\n13888.04\n1191.70\n3431.50\n0.00\n9264.84\n8940.04\n324.80\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n18246\n9\n2018-01-21\n1.87\n13766.76\n1191.92\n2452.79\n727.94\n9394.11\n9351.80\n42.31\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n18247\n10\n2018-01-14\n1.93\n16205.22\n1527.63\n2981.04\n727.01\n10969.54\n10919.54\n50.00\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n18248\n11\n2018-01-07\n1.62\n17489.58\n2894.77\n2356.13\n224.53\n12014.15\n11988.14\n26.01\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n\n\n18249 rows × 14 columns\n\n\n\nLet’s drop the column containing the unique ids (pandas does that for us) and rename the columns for simplicity.\n\navocado = avocado.drop(\"Unnamed: 0\", axis=\"columns\")\navocado = avocado.rename(mapper={\"AveragePrice\": \"Averate Price\"}, axis=\"columns\")\navocado.columns = avocado.columns.str.lower().str.replace(\" \", \"_\")\navocado.columns\n\nIndex(['date', 'averate_price', 'total_volume', '4046', '4225', '4770',\n       'total_bags', 'small_bags', 'large_bags', 'xlarge_bags', 'type', 'year',\n       'region'],\n      dtype='object')\n\n\n\navocado.shape\n\n(18249, 13)\n\n\n\navocado.dtypes\n\ndate              object\naverate_price    float64\ntotal_volume     float64\n4046             float64\n4225             float64\n4770             float64\ntotal_bags       float64\nsmall_bags       float64\nlarge_bags       float64\nxlarge_bags      float64\ntype              object\nyear               int64\nregion            object\ndtype: object\n\n\ndate should be converted to datetime dtype and type and region should be category dtype. total_column, 4046, 4225, 4770, total_bags, small_bags, and xlarge_bags are floats but represent an absolute value (number of bags and avocados sold), they should be rounded and converted to int type.\n\nHandling datetime features\n\navocado[\"date\"] = pd.to_datetime(avocado[\"date\"].str.strip())\navocado[\"date\"].dtype\n\ndtype('&lt;M8[ns]')\n\n\n\n\nHandling categorical features\n\ncategorical_features = [\n    \"type\",\n    \"region\"\n]\navocado[categorical_features] = avocado[categorical_features].apply(\n    lambda col: col.str.strip().astype(\"category\")\n)\navocado[categorical_features].dtypes\n\ntype      category\nregion    category\ndtype: object\n\n\n\n\nHanding numerical features\n\nnumerical_features = [\n    \"total_volume\",\n    \"4046\",\n    \"4225\",\n    \"4770\",\n    \"total_bags\",\n    \"small_bags\",\n    \"large_bags\",\n    \"xlarge_bags\"\n]\n\navocado[numerical_features] = avocado[numerical_features].apply(\n    lambda col: col.astype(\"int\")\n)\navocado[numerical_features].dtypes\n\ntotal_volume    int64\n4046            int64\n4225            int64\n4770            int64\ntotal_bags      int64\nsmall_bags      int64\nlarge_bags      int64\nxlarge_bags     int64\ndtype: object\n\n\n\n\nDescriptive statistics, missing & duplicates\n\navocado.describe(include=\"all\")\n\n\n\n\n\n\n\n\ndate\naverate_price\ntotal_volume\n4046\n4225\n4770\ntotal_bags\nsmall_bags\nlarge_bags\nxlarge_bags\ntype\nyear\nregion\n\n\n\n\ncount\n18249\n18249.000000\n1.824900e+04\n1.824900e+04\n1.824900e+04\n1.824900e+04\n1.824900e+04\n1.824900e+04\n1.824900e+04\n18249.000000\n18249\n18249.000000\n18249\n\n\nunique\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2\nNaN\n54\n\n\ntop\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nconventional\nNaN\nAlbany\n\n\nfreq\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n9126\nNaN\n338\n\n\nmean\n2016-08-13 23:30:43.498273792\n1.405978\n8.506435e+05\n2.930079e+05\n2.951541e+05\n2.283940e+04\n2.396387e+05\n1.821942e+05\n5.433767e+04\n3106.279029\nNaN\n2016.147899\nNaN\n\n\nmin\n2015-01-04 00:00:00\n0.440000\n8.400000e+01\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000\nNaN\n2015.000000\nNaN\n\n\n25%\n2015-10-25 00:00:00\n1.100000\n1.083800e+04\n8.540000e+02\n3.008000e+03\n0.000000e+00\n5.088000e+03\n2.849000e+03\n1.270000e+02\n0.000000\nNaN\n2015.000000\nNaN\n\n\n50%\n2016-08-14 00:00:00\n1.370000\n1.073760e+05\n8.645000e+03\n2.906100e+04\n1.840000e+02\n3.974300e+04\n2.636200e+04\n2.647000e+03\n0.000000\nNaN\n2016.000000\nNaN\n\n\n75%\n2017-06-04 00:00:00\n1.660000\n4.329620e+05\n1.110200e+05\n1.502060e+05\n6.243000e+03\n1.107830e+05\n8.333700e+04\n2.202900e+04\n132.000000\nNaN\n2017.000000\nNaN\n\n\nmax\n2018-03-25 00:00:00\n3.250000\n6.250565e+07\n2.274362e+07\n2.047057e+07\n2.546439e+06\n1.937313e+07\n1.338459e+07\n5.719096e+06\n551693.000000\nNaN\n2018.000000\nNaN\n\n\nstd\nNaN\n0.402677\n3.453545e+06\n1.264989e+06\n1.204120e+06\n1.074640e+05\n9.862424e+05\n7.461785e+05\n2.439659e+05\n17692.837485\nNaN\n0.939938\nNaN\n\n\n\n\n\n\n\n\navocado.isna().any()\n\ndate             False\naverate_price    False\ntotal_volume     False\n4046             False\n4225             False\n4770             False\ntotal_bags       False\nsmall_bags       False\nlarge_bags       False\nxlarge_bags      False\ntype             False\nyear             False\nregion           False\ndtype: bool\n\n\n\navocado[avocado.duplicated()].shape\n\n(0, 13)\n\n\n\n\nCorrelations\n\nplotter.corr(avocado.corr(numeric_only=True))\n\n\n\n\n\n\n\n\nThe numerical features are positively correlated to one another."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Smells",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\n\nDescription\n\n\n\n\n\n\n\n\nBinary missing values\n\n\nPresence of high quantities of missing data primarily within a column (as opposed to being distributed across rows and columns) can be a smell that the missing data might carry implicit meaning of a negative binary response. \n\n\n\n\n\n\nBinning categorical features\n\n\nOne-hot encoding a feature with high cardinality results in a large feature space and incurs higher memory, disk space and computation costs. \n\n\n\n\n\n\nCorrelated Features\n\n\nCorrelated features present an opportunity to perform feature selection and drop dedundant features which do not affect the model’s performance. \n\n\n\n\n\n\nDuplicate examples\n\n\nDuplicate examples make the dataset “bloated” and can lead to overfitting. \n\n\n\n\n\n\nHierarchy from label encoding\n\n\nLabel encoding sensitive categorical features can introduce unwanted hierarchy amongst the values and lead to biased predictions. \n\n\n\n\n\n\nImbalanced examples\n\n\nPresence of unbalanced examples for the classes in a dataset can lead to biased predictions. \n\n\n\n\n\n\nNulltype Missing Values\n\n\nMissing values are ignored by data analysis tools which performing statistical computations, leading to inaccurate and biased conclusions. \n\n\n\n\n\n\nNumerical feature as string\n\n\nString features with names that indicate a numerical data type (e.g., “current_ver”, “android_ver”) is a smell that the data type of the column was identified incorrectly by the data analysis tool. \n\n\n\n\n\n\nPresence of sensitive features\n\n\nPresence of sensitive features such as sex, gender, race or income can lead to biased and unfair model predictions. \n\n\n\n\n\n\nSpecial missing values\n\n\nUsing special characters (“?”), keywords (“null”, “nil”) and numbers (-9999, -6666) to represent missing values are a smell for problems in downstream stages. \n\n\n\n\n\n\nStrings in human-friendly formats\n\n\nNumerical information being representd in a human-friendly format (“90 min”, “2 seasons”) is a smell for potential problems during the data analysis stage. \n\n\n\n\n\n\nStrings with special characters\n\n\nThe presence of leading and trailing whitespaces and special characters such as punctuation marks is a smell for potential problems in the data analysis stage. \n\n\n\n\n\n\nUnique Identifiers\n\n\nColumns containing unique identifiers are redundant when training machine learning models and may lead to problems in downstream stages. \n\n\n\n\n\n\nUnknown unit of measure\n\n\nLack of a common unit of measure (distance, area, size, etc.) for all numerical features is an early indicator of potential problems that can arise during model training. \n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "adult.html",
    "href": "adult.html",
    "title": "Adult census income",
    "section": "",
    "text": "The data documentation is informative.\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport os\nfrom data import load_dataset\nimport plotter"
  },
  {
    "objectID": "adult.html#preliminary-analysis",
    "href": "adult.html#preliminary-analysis",
    "title": "Adult census income",
    "section": "Preliminary analysis",
    "text": "Preliminary analysis\n\nadult = load_dataset(\"adult\")\nadult\n\nDownloading from https://www.kaggle.com/api/v1/datasets/download/uciml/adult-census-income?dataset_version_number=3&file_name=adult.csv...\n\n\n100%|██████████| 450k/450k [00:00&lt;00:00, 1.03MB/s]\n\n\nExtracting zip of adult.csv...\n\n\n\n\n\n\n\n\n\n\n\n\nage\nworkclass\nfnlwgt\neducation\neducation.num\nmarital.status\noccupation\nrelationship\nrace\nsex\ncapital.gain\ncapital.loss\nhours.per.week\nnative.country\nincome\n\n\n\n\n0\n90\n?\n77053\nHS-grad\n9\nWidowed\n?\nNot-in-family\nWhite\nFemale\n0\n4356\n40\nUnited-States\n&lt;=50K\n\n\n1\n82\nPrivate\n132870\nHS-grad\n9\nWidowed\nExec-managerial\nNot-in-family\nWhite\nFemale\n0\n4356\n18\nUnited-States\n&lt;=50K\n\n\n2\n66\n?\n186061\nSome-college\n10\nWidowed\n?\nUnmarried\nBlack\nFemale\n0\n4356\n40\nUnited-States\n&lt;=50K\n\n\n3\n54\nPrivate\n140359\n7th-8th\n4\nDivorced\nMachine-op-inspct\nUnmarried\nWhite\nFemale\n0\n3900\n40\nUnited-States\n&lt;=50K\n\n\n4\n41\nPrivate\n264663\nSome-college\n10\nSeparated\nProf-specialty\nOwn-child\nWhite\nFemale\n0\n3900\n40\nUnited-States\n&lt;=50K\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n32556\n22\nPrivate\n310152\nSome-college\n10\nNever-married\nProtective-serv\nNot-in-family\nWhite\nMale\n0\n0\n40\nUnited-States\n&lt;=50K\n\n\n32557\n27\nPrivate\n257302\nAssoc-acdm\n12\nMarried-civ-spouse\nTech-support\nWife\nWhite\nFemale\n0\n0\n38\nUnited-States\n&lt;=50K\n\n\n32558\n40\nPrivate\n154374\nHS-grad\n9\nMarried-civ-spouse\nMachine-op-inspct\nHusband\nWhite\nMale\n0\n0\n40\nUnited-States\n&gt;50K\n\n\n32559\n58\nPrivate\n151910\nHS-grad\n9\nWidowed\nAdm-clerical\nUnmarried\nWhite\nFemale\n0\n0\n40\nUnited-States\n&lt;=50K\n\n\n32560\n22\nPrivate\n201490\nHS-grad\n9\nNever-married\nAdm-clerical\nOwn-child\nWhite\nMale\n0\n0\n20\nUnited-States\n&lt;=50K\n\n\n\n\n32561 rows × 15 columns\n\n\n\n\nadult.shape\n\n(32561, 15)\n\n\n\nadult.dtypes\n\nage                int64\nworkclass         object\nfnlwgt             int64\neducation         object\neducation.num      int64\nmarital.status    object\noccupation        object\nrelationship      object\nrace              object\nsex               object\ncapital.gain       int64\ncapital.loss       int64\nhours.per.week     int64\nnative.country    object\nincome            object\ndtype: object\n\n\nCheck for missing values next. The documentation mentioned that missing values are represented by “?” in the dataset.\n\nadult.isna().any()\n\nage               False\nworkclass         False\nfnlwgt            False\neducation         False\neducation.num     False\nmarital.status    False\noccupation        False\nrelationship      False\nrace              False\nsex               False\ncapital.gain      False\ncapital.loss      False\nhours.per.week    False\nnative.country    False\nincome            False\ndtype: bool\n\n\n\nadult[adult.eq(\"?\")].any()\n\nage               False\nworkclass          True\nfnlwgt            False\neducation         False\neducation.num     False\nmarital.status    False\noccupation         True\nrelationship      False\nrace              False\nsex               False\ncapital.gain      False\ncapital.loss      False\nhours.per.week    False\nnative.country     True\nincome            False\ndtype: bool\n\n\n\nadult.workclass.value_counts()\n\nworkclass\nPrivate             22696\nSelf-emp-not-inc     2541\nLocal-gov            2093\n?                    1836\nState-gov            1298\nSelf-emp-inc         1116\nFederal-gov           960\nWithout-pay            14\nNever-worked            7\nName: count, dtype: int64\n\n\nadult.eq() does not catch ? but if we inspect value_counts() for a specific feature, we note that ? does exist in the dataset. Why is that?\n\nadult.workclass.astype(\"category\").cat.categories\n\nIndex(['?', 'Federal-gov', 'Local-gov', 'Never-worked', 'Private',\n       'Self-emp-inc', 'Self-emp-not-inc', 'State-gov', 'Without-pay'],\n      dtype='object')\n\n\nI suspect there are leading and trailing whitespaces!\n\ncategorical_features = adult.select_dtypes(include=\"object\").columns.to_list()\n\nadult[categorical_features].apply(lambda col: col.str.strip())\n\n\n\n\n\n\n\n\nworkclass\neducation\nmarital.status\noccupation\nrelationship\nrace\nsex\nnative.country\nincome\n\n\n\n\n0\n?\nHS-grad\nWidowed\n?\nNot-in-family\nWhite\nFemale\nUnited-States\n&lt;=50K\n\n\n1\nPrivate\nHS-grad\nWidowed\nExec-managerial\nNot-in-family\nWhite\nFemale\nUnited-States\n&lt;=50K\n\n\n2\n?\nSome-college\nWidowed\n?\nUnmarried\nBlack\nFemale\nUnited-States\n&lt;=50K\n\n\n3\nPrivate\n7th-8th\nDivorced\nMachine-op-inspct\nUnmarried\nWhite\nFemale\nUnited-States\n&lt;=50K\n\n\n4\nPrivate\nSome-college\nSeparated\nProf-specialty\nOwn-child\nWhite\nFemale\nUnited-States\n&lt;=50K\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n32556\nPrivate\nSome-college\nNever-married\nProtective-serv\nNot-in-family\nWhite\nMale\nUnited-States\n&lt;=50K\n\n\n32557\nPrivate\nAssoc-acdm\nMarried-civ-spouse\nTech-support\nWife\nWhite\nFemale\nUnited-States\n&lt;=50K\n\n\n32558\nPrivate\nHS-grad\nMarried-civ-spouse\nMachine-op-inspct\nHusband\nWhite\nMale\nUnited-States\n&gt;50K\n\n\n32559\nPrivate\nHS-grad\nWidowed\nAdm-clerical\nUnmarried\nWhite\nFemale\nUnited-States\n&lt;=50K\n\n\n32560\nPrivate\nHS-grad\nNever-married\nAdm-clerical\nOwn-child\nWhite\nMale\nUnited-States\n&lt;=50K\n\n\n\n\n32561 rows × 9 columns\n\n\n\n\nadult[adult.eq(\"?\")].any()\n\nage               False\nworkclass          True\nfnlwgt            False\neducation         False\neducation.num     False\nmarital.status    False\noccupation         True\nrelationship      False\nrace              False\nsex               False\ncapital.gain      False\ncapital.loss      False\nhours.per.week    False\nnative.country     True\nincome            False\ndtype: bool\n\n\n\nadult = adult.replace(\"?\", value=np.nan)\nadult.isna().any()\n\nage               False\nworkclass          True\nfnlwgt            False\neducation         False\neducation.num     False\nmarital.status    False\noccupation         True\nrelationship      False\nrace              False\nsex               False\ncapital.gain      False\ncapital.loss      False\nhours.per.week    False\nnative.country     True\nincome            False\ndtype: bool\n\n\n\nadult = adult.dropna()\nadult.shape\n\n(30162, 15)\n\n\n\nadult[categorical_features] = adult[categorical_features].astype(\"category\")\nadult.dtypes\n\nage                  int64\nworkclass         category\nfnlwgt               int64\neducation         category\neducation.num        int64\nmarital.status    category\noccupation        category\nrelationship      category\nrace              category\nsex               category\ncapital.gain         int64\ncapital.loss         int64\nhours.per.week       int64\nnative.country    category\nincome            category\ndtype: object\n\n\n\nadult[adult.duplicated()].shape\n\n(23, 15)\n\n\n23 rows with duplicate entries, let’s drop those.\n\nadult = adult.drop_duplicates()\nadult.shape\n\n(30139, 15)\n\n\nFinally, check for correlations in numerical features.\n\nplotter.corr(adult.corr(numeric_only=True))\n\n\n\n\n\n\n\n\nWe see more strong positive and negative correlations amongst the numerical features. This is an opportunity to do some experimentation with feature selection and drop features which don’t bring anything to the table. For this analysis however, we don’t do anything further."
  },
  {
    "objectID": "adult.html#distributional-analysis",
    "href": "adult.html#distributional-analysis",
    "title": "Adult census income",
    "section": "Distributional analysis",
    "text": "Distributional analysis\n\nsns.histplot(data=adult, x=\"income\")\n\n\n\n\n\n\n\n\nThe labels for the classes are not balanced."
  },
  {
    "objectID": "adult.html#relational-analysis",
    "href": "adult.html#relational-analysis",
    "title": "Adult census income",
    "section": "Relational analysis",
    "text": "Relational analysis\nTODO"
  },
  {
    "objectID": "adult.html#categorical-analysis",
    "href": "adult.html#categorical-analysis",
    "title": "Adult census income",
    "section": "Categorical analysis",
    "text": "Categorical analysis\nTODO"
  },
  {
    "objectID": "airbnb.html",
    "href": "airbnb.html",
    "title": "New york city airbnb open data",
    "section": "",
    "text": "The data documentation does not provide much information about the dataset.\nimport pandas as pd\nimport seaborn as sns\nimport os\nfrom data import load_dataset\nimport plotter\n\n/Users/aru/code/data-smells/.venv/lib/python3.13/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm"
  },
  {
    "objectID": "airbnb.html#preliminary-analysis",
    "href": "airbnb.html#preliminary-analysis",
    "title": "New york city airbnb open data",
    "section": "Preliminary analysis",
    "text": "Preliminary analysis\n\nairbnb = load_dataset(\"airbnb\")\nairbnb\n\n\n\n\n\n\n\n\nid\nname\nhost_id\nhost_name\nneighbourhood_group\nneighbourhood\nlatitude\nlongitude\nroom_type\nprice\nminimum_nights\nnumber_of_reviews\nlast_review\nreviews_per_month\ncalculated_host_listings_count\navailability_365\n\n\n\n\n0\n2539\nClean & quiet apt home by the park\n2787\nJohn\nBrooklyn\nKensington\n40.64749\n-73.97237\nPrivate room\n149\n1\n9\n2018-10-19\n0.21\n6\n365\n\n\n1\n2595\nSkylit Midtown Castle\n2845\nJennifer\nManhattan\nMidtown\n40.75362\n-73.98377\nEntire home/apt\n225\n1\n45\n2019-05-21\n0.38\n2\n355\n\n\n2\n3647\nTHE VILLAGE OF HARLEM....NEW YORK !\n4632\nElisabeth\nManhattan\nHarlem\n40.80902\n-73.94190\nPrivate room\n150\n3\n0\nNaN\nNaN\n1\n365\n\n\n3\n3831\nCozy Entire Floor of Brownstone\n4869\nLisaRoxanne\nBrooklyn\nClinton Hill\n40.68514\n-73.95976\nEntire home/apt\n89\n1\n270\n2019-07-05\n4.64\n1\n194\n\n\n4\n5022\nEntire Apt: Spacious Studio/Loft by central park\n7192\nLaura\nManhattan\nEast Harlem\n40.79851\n-73.94399\nEntire home/apt\n80\n10\n9\n2018-11-19\n0.10\n1\n0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n48890\n36484665\nCharming one bedroom - newly renovated rowhouse\n8232441\nSabrina\nBrooklyn\nBedford-Stuyvesant\n40.67853\n-73.94995\nPrivate room\n70\n2\n0\nNaN\nNaN\n2\n9\n\n\n48891\n36485057\nAffordable room in Bushwick/East Williamsburg\n6570630\nMarisol\nBrooklyn\nBushwick\n40.70184\n-73.93317\nPrivate room\n40\n4\n0\nNaN\nNaN\n2\n36\n\n\n48892\n36485431\nSunny Studio at Historical Neighborhood\n23492952\nIlgar & Aysel\nManhattan\nHarlem\n40.81475\n-73.94867\nEntire home/apt\n115\n10\n0\nNaN\nNaN\n1\n27\n\n\n48893\n36485609\n43rd St. Time Square-cozy single bed\n30985759\nTaz\nManhattan\nHell's Kitchen\n40.75751\n-73.99112\nShared room\n55\n1\n0\nNaN\nNaN\n6\n2\n\n\n48894\n36487245\nTrendy duplex in the very heart of Hell's Kitchen\n68119814\nChristophe\nManhattan\nHell's Kitchen\n40.76404\n-73.98933\nPrivate room\n90\n7\n0\nNaN\nNaN\n1\n23\n\n\n\n\n48895 rows × 16 columns\n\n\n\nWe have a mix of text, numerical and categorical features, let’s take a closer look at the features.\n\nairbnb.shape\n\n(48895, 16)\n\n\n\nairbnb.dtypes\n\nid                                  int64\nname                               object\nhost_id                             int64\nhost_name                          object\nneighbourhood_group                object\nneighbourhood                      object\nlatitude                          float64\nlongitude                         float64\nroom_type                          object\nprice                               int64\nminimum_nights                      int64\nnumber_of_reviews                   int64\nlast_review                        object\nreviews_per_month                 float64\ncalculated_host_listings_count      int64\navailability_365                    int64\ndtype: object\n\n\n\nHandling redundant columns\nSo far, we have been dropping columns such as id & host_id since they contain unique identifiers which does not bring any new information to the model to learn. However, I did not consider the case where we may have data from the same entity (in this example the host, who may have multiple properties to rent out). Perhaps, there is a correlation between the number of properties and the other numerical features? Let’s investigate.\n\nidentifier_columns = [\"id\", \"host_id\"]\nidentifiers = airbnb[identifier_columns]\nidentifiers[identifiers.duplicated(keep=False)]\n\n\n\n\n\n\n\n\nid\nhost_id\n\n\n\n\n\n\n\n\n\nWe don’t have any “trully” duplicate examples (same listing with the same host). But we still may have different listings from the same host or same listing from different hosts (which would be incorrect/outlier)! Let’s example them separately next.\n\nidentifiers.loc[:, \"dup_id\"] = identifiers.duplicated(\"id\", keep=False)\nidentifiers.loc[:, \"dup_host_id\"] = identifiers.duplicated(\"host_id\", keep=False)\nidentifiers\n\n/var/folders/72/dkwg1j016fqf0st2qg2_56740000gn/T/ipykernel_37400/2750994099.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  identifiers.loc[:, \"dup_id\"] = identifiers.duplicated(\"id\", keep=False)\n/var/folders/72/dkwg1j016fqf0st2qg2_56740000gn/T/ipykernel_37400/2750994099.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  identifiers.loc[:, \"dup_host_id\"] = identifiers.duplicated(\"host_id\", keep=False)\n\n\n\n\n\n\n\n\n\nid\nhost_id\ndup_id\ndup_host_id\n\n\n\n\n0\n2539\n2787\nFalse\nTrue\n\n\n1\n2595\n2845\nFalse\nTrue\n\n\n2\n3647\n4632\nFalse\nFalse\n\n\n3\n3831\n4869\nFalse\nFalse\n\n\n4\n5022\n7192\nFalse\nFalse\n\n\n...\n...\n...\n...\n...\n\n\n48890\n36484665\n8232441\nFalse\nTrue\n\n\n48891\n36485057\n6570630\nFalse\nTrue\n\n\n48892\n36485431\n23492952\nFalse\nFalse\n\n\n48893\n36485609\n30985759\nFalse\nTrue\n\n\n48894\n36487245\n68119814\nFalse\nFalse\n\n\n\n\n48895 rows × 4 columns\n\n\n\n\nidentifiers[\"dup_id\"].any()\n\nnp.False_\n\n\n\nidentifiers[\"dup_host_id\"].any()\n\nnp.True_\n\n\nWe don’t have any duplicate id which means that we do not have a listing with multiple hosts (this is good), but we do have hosts with multiple listings (this is normal). Perhaps a useful feature to extract would be the number of listings for all hosts, but this is beyond the scope of this analysis. For now, we drop the identifier columns.\n\nairbnb = airbnb.drop(identifier_columns, axis=\"columns\")\nairbnb.shape\n\n(48895, 14)\n\n\n\n\nHandling text features\nThe name feature may contain several interesting numerical features (for instance, we can do an analysis of the most common words and if they are positively correlated with the number of reviews). For this analysis however, we drop it.\n\nairbnb = airbnb.drop(\"name\", axis=\"columns\")\nairbnb.shape\n\n(48895, 13)\n\n\nThe host_name feature is worth investigating. For instance, what is the most common name? And is there any relationship between the common names and the number of reviews their listing(s) get?\n\nairbnb[\"host_name\"] = airbnb[\"host_name\"].str.strip().astype(\"category\")\nairbnb[\"host_name\"].cat.categories\n\nIndex([''Cil', '(Ari) HENRY LEE', '(Email hidden by Airbnb)', '(Mary) Haiy',\n       '-TheQueensCornerLot', '0123', '2018Serenity', '371', '475',\n       '5 Star Stays',\n       ...\n       '辣辣', '铀 Yuli', '青明', '韦达', '馨惠', '단비', '빈나', '소정', '진', '현선'],\n      dtype='object', length=11452)\n\n\n\nairbnb[\"host_name\"].value_counts()\n\nhost_name\nMichael         417\nDavid           403\nSonder (NYC)    327\nJohn            294\nAlex            279\n               ... \nJerbean           1\nJerald            1\nJeonghoon         1\nJeny              1\n현선                1\nName: count, Length: 11452, dtype: int64\n\n\nPopular names are what we would expect (for a North American country). It does look like we have to perform some processing as there are names with special characters and mixed languages.\n\n\nHandling categorical features\nneighbourhood_group, neighbourhood and room_type are categorical, let’s convert them to category dtype.\n\ncategorical_features = [\n    \"neighbourhood_group\",\n    \"neighbourhood\",\n    \"room_type\"\n]\n\nairbnb[categorical_features] = airbnb[categorical_features].apply(\n    lambda col: col.str.strip().astype(\"category\")\n)\n\n\nairbnb[\"neighbourhood_group\"].value_counts()\n\nneighbourhood_group\nManhattan        21661\nBrooklyn         20104\nQueens            5666\nBronx             1091\nStaten Island      373\nName: count, dtype: int64\n\n\n\nairbnb[\"neighbourhood\"].value_counts()\n\nneighbourhood\nWilliamsburg          3920\nBedford-Stuyvesant    3714\nHarlem                2658\nBushwick              2465\nUpper West Side       1971\n                      ... \nRichmondtown             1\nWillowbrook              1\nFort Wadsworth           1\nNew Dorp                 1\nWoodrow                  1\nName: count, Length: 221, dtype: int64\n\n\n\nairbnb[\"room_type\"].value_counts()\n\nroom_type\nEntire home/apt    25409\nPrivate room       22326\nShared room         1160\nName: count, dtype: int64\n\n\n\n\nHandling datetime features\nlast_review should be converted to datetime dtype.\n\nairbnb[\"last_review\"] = pd.to_datetime(airbnb[\"last_review\"])\nairbnb[\"last_review\"]\n\n0       2018-10-19\n1       2019-05-21\n2              NaT\n3       2019-07-05\n4       2018-11-19\n           ...    \n48890          NaT\n48891          NaT\n48892          NaT\n48893          NaT\n48894          NaT\nName: last_review, Length: 48895, dtype: datetime64[ns]\n\n\n\n\nHandling numerical features\nThe docs specify that the price is in USD.\nThe calculated_host_listings_count is the number of listings the host has (what we also suggested earlier).\n\n\nDescriptive statistics, missing & duplicates\n\nairbnb.describe(include=\"all\")\n\n\n\n\n\n\n\n\nhost_name\nneighbourhood_group\nneighbourhood\nlatitude\nlongitude\nroom_type\nprice\nminimum_nights\nnumber_of_reviews\nlast_review\nreviews_per_month\ncalculated_host_listings_count\navailability_365\n\n\n\n\ncount\n48874\n48895\n48895\n48895.000000\n48895.000000\n48895\n48895.000000\n48895.000000\n48895.000000\n38843\n38843.000000\n48895.000000\n48895.000000\n\n\nunique\n11452\n5\n221\nNaN\nNaN\n3\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\ntop\nMichael\nManhattan\nWilliamsburg\nNaN\nNaN\nEntire home/apt\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nfreq\n417\n21661\n3920\nNaN\nNaN\n25409\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nmean\nNaN\nNaN\nNaN\n40.728949\n-73.952170\nNaN\n152.720687\n7.029962\n23.274466\n2018-10-04 01:47:23.910099456\n1.373221\n7.143982\n112.781327\n\n\nmin\nNaN\nNaN\nNaN\n40.499790\n-74.244420\nNaN\n0.000000\n1.000000\n0.000000\n2011-03-28 00:00:00\n0.010000\n1.000000\n0.000000\n\n\n25%\nNaN\nNaN\nNaN\n40.690100\n-73.983070\nNaN\n69.000000\n1.000000\n1.000000\n2018-07-08 00:00:00\n0.190000\n1.000000\n0.000000\n\n\n50%\nNaN\nNaN\nNaN\n40.723070\n-73.955680\nNaN\n106.000000\n3.000000\n5.000000\n2019-05-19 00:00:00\n0.720000\n1.000000\n45.000000\n\n\n75%\nNaN\nNaN\nNaN\n40.763115\n-73.936275\nNaN\n175.000000\n5.000000\n24.000000\n2019-06-23 00:00:00\n2.020000\n2.000000\n227.000000\n\n\nmax\nNaN\nNaN\nNaN\n40.913060\n-73.712990\nNaN\n10000.000000\n1250.000000\n629.000000\n2019-07-08 00:00:00\n58.500000\n327.000000\n365.000000\n\n\nstd\nNaN\nNaN\nNaN\n0.054530\n0.046157\nNaN\n240.154170\n20.510550\n44.550582\nNaN\n1.680442\n32.952519\n131.622289\n\n\n\n\n\n\n\nCheck for missing values next.\n\nairbnb.isna().any()\n\nhost_name                          True\nneighbourhood_group               False\nneighbourhood                     False\nlatitude                          False\nlongitude                         False\nroom_type                         False\nprice                             False\nminimum_nights                    False\nnumber_of_reviews                 False\nlast_review                        True\nreviews_per_month                  True\ncalculated_host_listings_count    False\navailability_365                  False\ndtype: bool\n\n\nHow much data is missing in total and per column?\n\nairbnb[airbnb.isna().any(axis=\"columns\")]\n\n\n\n\n\n\n\n\nhost_name\nneighbourhood_group\nneighbourhood\nlatitude\nlongitude\nroom_type\nprice\nminimum_nights\nnumber_of_reviews\nlast_review\nreviews_per_month\ncalculated_host_listings_count\navailability_365\n\n\n\n\n2\nElisabeth\nManhattan\nHarlem\n40.80902\n-73.94190\nPrivate room\n150\n3\n0\nNaT\nNaN\n1\n365\n\n\n19\nSing\nManhattan\nEast Harlem\n40.79685\n-73.94872\nEntire home/apt\n190\n7\n0\nNaT\nNaN\n2\n249\n\n\n26\nClaude & Sophie\nManhattan\nInwood\n40.86754\n-73.92639\nPrivate room\n80\n4\n0\nNaT\nNaN\n1\n0\n\n\n36\nVt\nBrooklyn\nBedford-Stuyvesant\n40.68876\n-73.94312\nPrivate room\n35\n60\n0\nNaT\nNaN\n1\n365\n\n\n38\nHarriet\nBrooklyn\nFlatbush\n40.63702\n-73.96327\nPrivate room\n150\n1\n0\nNaT\nNaN\n1\n365\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n48890\nSabrina\nBrooklyn\nBedford-Stuyvesant\n40.67853\n-73.94995\nPrivate room\n70\n2\n0\nNaT\nNaN\n2\n9\n\n\n48891\nMarisol\nBrooklyn\nBushwick\n40.70184\n-73.93317\nPrivate room\n40\n4\n0\nNaT\nNaN\n2\n36\n\n\n48892\nIlgar & Aysel\nManhattan\nHarlem\n40.81475\n-73.94867\nEntire home/apt\n115\n10\n0\nNaT\nNaN\n1\n27\n\n\n48893\nTaz\nManhattan\nHell's Kitchen\n40.75751\n-73.99112\nShared room\n55\n1\n0\nNaT\nNaN\n6\n2\n\n\n48894\nChristophe\nManhattan\nHell's Kitchen\n40.76404\n-73.98933\nPrivate room\n90\n7\n0\nNaT\nNaN\n1\n23\n\n\n\n\n10068 rows × 13 columns\n\n\n\n\nairbnb[airbnb[\"host_name\"].isna()].shape\n\n(21, 13)\n\n\n\nairbnb[airbnb[\"last_review\"].isna()].shape\n\n(10052, 13)\n\n\n\nairbnb[airbnb[\"reviews_per_month\"].isna()].shape\n\n(10052, 13)\n\n\nMost of the missing data is in the last_review and reviews_per_month features. We may wish to drop these two columns, as imputing will lead to technical debt.\nFinally, Checking for duplicates.\n\nairbnb[airbnb.duplicated()].shape\n\n(0, 13)\n\n\n\n\nCorrelations\nCheck the correlations between the numerical features.\n\nplotter.corr(airbnb.corr(numeric_only=True))\n\n\n\n\n\n\n\n\nNo significant positive correlations except for reviews_per_month and number_of_reviews which is to be expected."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "catalog/binary-missing-values.html",
    "href": "catalog/binary-missing-values.html",
    "title": "Binary missing values",
    "section": "",
    "text": "Presence of high quantities of missing data primarily within a column—as opposed to being distributed across rows and columns—can be a smell that the data is not truly missing. The missing values in such cases may carry an implicit meaning of a negative binary response. This can be validated further by observing the column header along with the non-missing values of the feature(s) in question. If the non-missing data is indicative of a positive response such as ‘{t,T}rue’ or ‘{y,Y}es’ then the missing data may indicate a negative response."
  },
  {
    "objectID": "abalone.html",
    "href": "abalone.html",
    "title": "Abalone",
    "section": "",
    "text": "The documentation is complete and informative. One interesting observation is that the sex field can have 3 values, namely male, female and infant.\nimport pandas as pd\nimport seaborn as sns\nimport os\nfrom data import load_dataset\nimport plotter"
  },
  {
    "objectID": "abalone.html#preliminary-analysis",
    "href": "abalone.html#preliminary-analysis",
    "title": "Abalone",
    "section": "Preliminary analysis",
    "text": "Preliminary analysis\n\nabalone = load_dataset(\"abalone\")\nabalone\n\n\n\n\n\n\n\n\nSex\nLength\nDiameter\nHeight\nWhole weight\nShucked weight\nViscera weight\nShell weight\nRings\n\n\n\n\n0\nM\n0.455\n0.365\n0.095\n0.5140\n0.2245\n0.1010\n0.1500\n15\n\n\n1\nM\n0.350\n0.265\n0.090\n0.2255\n0.0995\n0.0485\n0.0700\n7\n\n\n2\nF\n0.530\n0.420\n0.135\n0.6770\n0.2565\n0.1415\n0.2100\n9\n\n\n3\nM\n0.440\n0.365\n0.125\n0.5160\n0.2155\n0.1140\n0.1550\n10\n\n\n4\nI\n0.330\n0.255\n0.080\n0.2050\n0.0895\n0.0395\n0.0550\n7\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n4172\nF\n0.565\n0.450\n0.165\n0.8870\n0.3700\n0.2390\n0.2490\n11\n\n\n4173\nM\n0.590\n0.440\n0.135\n0.9660\n0.4390\n0.2145\n0.2605\n10\n\n\n4174\nM\n0.600\n0.475\n0.205\n1.1760\n0.5255\n0.2875\n0.3080\n9\n\n\n4175\nF\n0.625\n0.485\n0.150\n1.0945\n0.5310\n0.2610\n0.2960\n10\n\n\n4176\nM\n0.710\n0.555\n0.195\n1.9485\n0.9455\n0.3765\n0.4950\n12\n\n\n\n\n4177 rows × 9 columns\n\n\n\n\nabalone.describe(include=\"all\")\n\n\n\n\n\n\n\n\nSex\nLength\nDiameter\nHeight\nWhole weight\nShucked weight\nViscera weight\nShell weight\nRings\n\n\n\n\ncount\n4177\n4177.000000\n4177.000000\n4177.000000\n4177.000000\n4177.000000\n4177.000000\n4177.000000\n4177.000000\n\n\nunique\n3\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\ntop\nM\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nfreq\n1528\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nmean\nNaN\n0.523992\n0.407881\n0.139516\n0.828742\n0.359367\n0.180594\n0.238831\n9.933684\n\n\nstd\nNaN\n0.120093\n0.099240\n0.041827\n0.490389\n0.221963\n0.109614\n0.139203\n3.224169\n\n\nmin\nNaN\n0.075000\n0.055000\n0.000000\n0.002000\n0.001000\n0.000500\n0.001500\n1.000000\n\n\n25%\nNaN\n0.450000\n0.350000\n0.115000\n0.441500\n0.186000\n0.093500\n0.130000\n8.000000\n\n\n50%\nNaN\n0.545000\n0.425000\n0.140000\n0.799500\n0.336000\n0.171000\n0.234000\n9.000000\n\n\n75%\nNaN\n0.615000\n0.480000\n0.165000\n1.153000\n0.502000\n0.253000\n0.329000\n11.000000\n\n\nmax\nNaN\n0.815000\n0.650000\n1.130000\n2.825500\n1.488000\n0.760000\n1.005000\n29.000000\n\n\n\n\n\n\n\n\nabalone.dtypes\n\nSex                object\nLength            float64\nDiameter          float64\nHeight            float64\nWhole weight      float64\nShucked weight    float64\nViscera weight    float64\nShell weight      float64\nRings               int64\ndtype: object\n\n\n\nabalone.shape\n\n(4177, 9)\n\n\n\nabalone.isna().any()\n\nSex               False\nLength            False\nDiameter          False\nHeight            False\nWhole weight      False\nShucked weight    False\nViscera weight    False\nShell weight      False\nRings             False\ndtype: bool\n\n\n\nabalone[abalone.duplicated()].shape\n\n(0, 9)\n\n\n\nplotter.corr(abalone.corr(numeric_only=True))\n\n\n\n\n\n\n\n\nAll numerical features are positively correlated with one another. This may present an opportunity to do some feature selection. Unfortunately, there are no particular features that are strongly correlated to rings. In other words, we may need to perform feature engineering to aid the model to learn better."
  },
  {
    "objectID": "abalone.html#distributional-analysis",
    "href": "abalone.html#distributional-analysis",
    "title": "Abalone",
    "section": "Distributional analysis",
    "text": "Distributional analysis\n\nsns.histplot(data=abalone, x=\"Rings\", kde=True)"
  },
  {
    "objectID": "abalone.html#relational-analysis",
    "href": "abalone.html#relational-analysis",
    "title": "Abalone",
    "section": "Relational analysis",
    "text": "Relational analysis\n\nnumerical_features = abalone.columns.to_list()\nnumerical_features.remove(\"Sex\")\nnumerical_features.remove(\"Rings\")\n\nsns.pairplot(data=abalone, x_vars=numerical_features, y_vars=[\"Rings\"], hue=\"Rings\")\n\n\n\n\n\n\n\n\nWe observe that abalones with a larger diameter and height, generally have a higher number of rings. The number of rings seems to be evenly distributed across the remaining features. We can study this relationship better using a lineplot.\n\ng = sns.PairGrid(data=abalone, x_vars=numerical_features, y_vars=[\"Rings\"])\ng.map(sns.lineplot)\n\n\n\n\n\n\n\n\nThe linear relationship between diameter and height with ring is obvious form the lineplot. We also check the pairwise relationships between each feature next.\n\nsns.pairplot(data=abalone, vars=numerical_features, corner=True)\n\n\n\n\n\n\n\n\nAll numerical features are linearly related to one another."
  },
  {
    "objectID": "abalone.html#categorical-analysis",
    "href": "abalone.html#categorical-analysis",
    "title": "Abalone",
    "section": "Categorical analysis",
    "text": "Categorical analysis\nWe have one categorical feature in the dataset namely sex. Let’s condition rings on sex to see if the number of rings vary across the sexes.\n\nsns.histplot(data=abalone, x=\"Rings\", hue=\"Sex\", bins=20, multiple=\"fill\")\n\n\n\n\n\n\n\n\nWe observe similar distribution for the male and female sexes. Infants primarily have lower number of rings."
  }
]